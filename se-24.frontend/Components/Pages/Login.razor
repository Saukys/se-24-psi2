@page "/login"
@using System.ComponentModel.DataAnnotations
@using se_24.frontend.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Login</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="loginIdentifier">Email or Username</label>
                            <InputText id="loginIdentifier" class="form-control" @bind-Value="loginModel.LoginIdentifier" />
                            <ValidationMessage For="@(() => loginModel.LoginIdentifier)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-3">
                        <a href="/register">Don't have an account? Register here</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string ErrorMessage { get; set; }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email or username is required")]
        public string LoginIdentifier { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                
                // Store authentication state
                var authState = new AuthState
                {
                    Username = loginModel.LoginIdentifier,
                    UserId = result.UserId
                };
                
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authState", 
                    System.Text.Json.JsonSerializer.Serialize(authState));
                
                NavigationManager.NavigateTo("/profile");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Login failed: {errorContent}";
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = "Unable to connect to the server. Please try again later.";
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred. Please try again later.";
        }
    }

    private class LoginResponse
    {
        public string Message { get; set; }
        public Guid UserId { get; set; }
    }

    private class AuthState
    {
        public string Username { get; set; }
        public Guid UserId { get; set; }
    }
} 