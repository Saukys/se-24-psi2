@startuml
' =============================================
' Score Processing and Analytics Flow
' =============================================
' This diagram represents the flow of score processing and analytics generation
' in the educational game platform.
'
' Key Participants:
' - User: The player submitting scores
' - ScoreController: Handles score-related HTTP requests
' - IScoreService: Core score processing logic
' - IUserService: User-related operations
' - IAnalyticsService: Analytics generation
' - IEmailService: Notification handling
' - IScoreRepository: Score persistence
' - IUserRepository: User data access
' - IUserProgressRepository: Progress tracking
' - ILeaderboardRepository: Leaderboard management
'
' Main Flows:
' 1. Score Submission: User submits a score for a game
' 2. Analytics Update: System updates user and group analytics
' 3. Leaderboard Update: System updates relevant leaderboards
' =============================================

actor User
participant "ScoreController" as SC
participant "IScoreService" as SS
participant "IUserService" as US
participant "IAnalyticsService" as AS
participant "IEmailService" as ES
participant "IScoreRepository" as SR
participant "IUserRepository" as UR
participant "IUserProgressRepository" as UPR
participant "ILeaderboardRepository" as LR

' Score Submission Flow
== Score Submission ==
User -> SC: submitScore(gameId, score)
activate SC
SC -> SS: processScore(gameId, userId, score)
activate SS

SS -> SS: validateScore(score)

SS -> SR: saveScore(score)
activate SR
SR --> SS: savedScore
deactivate SR

SS -> US: getUser(userId)
activate US
US -> UR: findById(userId)
activate UR
UR --> US: user
deactivate UR
US --> SS: user
deactivate US
SS -> SS: calculateFinalScore(sessionId)
SS -> LR: updateLeaderboard(score)
activate LR
LR --> SS: updated
deactivate LR

SS -> UPR: updateUserProgress(userId, score)
activate UPR
UPR --> SS: updated
deactivate UPR

deactivate AS

opt met achievement threshold
SS -> ES: sendAchievementNotification(userId, achievement)
activate ES
ES --> SS: sent
deactivate ES
end

SS --> SC: processedScore
deactivate SS
SC --> User: scoreResponse
deactivate SC

' Analytics Update Flow
== Analytics fetching ==
User -> SC: getAnalytics(userId)
activate SC
SC -> AS: generateAnalytics(userId)
activate AS

AS -> UPR: getUserProgress(userId)
activate UPR
UPR --> AS: progress
deactivate UPR

AS -> LR: getLeaderboard(gameId)
activate LR
LR --> AS: leaderboard
deactivate LR

AS -> AS: calculateStatistics()
AS --> SC: analytics
deactivate AS
SC --> User: analyticsResponse
deactivate SC

    ' Leaderboard Flow
== Leaderboard fetching ==
User -> SC: getLeaderboard(gameId)
activate SC
SC -> LR: fetchLeaderboard(gameId)
activate LR
LR --> SC: leaderboard
deactivate LR
SC --> User: leaderboardResponse
deactivate SC

@enduml 