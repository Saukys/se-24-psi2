@startuml
' =============================================
' Game Session Sequence Diagram
' =============================================
' This diagram shows the flow of a game session, including:
' - Game initialization
' - State management
' - Score calculation
' - Achievement checking
' - Session finalization
' =============================================

actor User
participant "GameController" as GameController
participant "IGameService" as GameService
participant "IScoreService" as ScoreService
participant "IGameRepository" as GameRepository
participant "IScoreRepository" as ScoreRepository
participant "IEmailService" as EmailService
participant "GameSession" as GameSession

== Game Initialization ==
User -> GameController: startGame(gameId)
activate GameController
GameController -> GameService: createGameSession()
activate GameService
GameService -> GameRepository: getGameById(gameId)
activate GameRepository
GameRepository --> GameService: game
deactivate GameRepository
GameService -> GameService: loadResources()
GameService -> GameService: validateGameState()
GameService --> GameController: gameSession
deactivate GameService
GameController --> User: gameSession
deactivate GameController

== Game State Management ==
User -> GameController: updateGameState(action)
activate GameController
GameController -> GameService: validateAction()
activate GameService
GameService -> GameService: processGameState(sessionId)
GameService -> GameService: validateGameRules(gameId)
GameService -> GameService: updateState()
GameService --> GameController: gameState
deactivate GameService
GameController --> User: gameState
deactivate GameController

== Score Calculation ==
User -> GameController: endGame(sessionId)
activate GameController
GameController -> GameService: finalizeSession()
activate GameService
GameService -> ScoreService: calculateFinalScore(sessionId)
activate ScoreService
ScoreService -> ScoreService: processScore(gameId, userId, score)
ScoreService -> ScoreService: validateScore(score)
ScoreService -> ScoreService: calculateStatistics()
ScoreService -> ScoreService: processStreaks(userId)
ScoreService --> GameService: finalScore
deactivate ScoreService
GameService --> GameController: finalScore
deactivate GameService
GameController --> User: finalScore
deactivate GameController

== Achievement Checking ==
GameService -> GameService: checkAchievements(sessionId)
activate GameService
GameService -> EmailService: sendAchievementNotification(email, achievementName)
activate EmailService
EmailService --> GameService
deactivate EmailService
GameService --> GameController: achievements
deactivate GameService

@enduml 