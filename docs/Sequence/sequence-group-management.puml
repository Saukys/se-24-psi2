@startuml
' =============================================
' Group Management Sequence Diagram
' =============================================
' This diagram shows the flow of group management, including:
' - Group creation
' - Member invitation
' - Member joining
' - Group status updates
' =============================================

actor InstitutionalAdmin
actor User
participant "GroupController" as GroupController
participant "IGroupService" as GroupService
participant "IGroupRepository" as GroupRepository
participant "IUserRepository" as UserRepository
participant "IGroupMembershipRepository" as GroupMembershipRepository
participant "IEmailService" as EmailService

== Group Creation ==
InstitutionalAdmin -> GroupController: createGroup(group)
activate GroupController
GroupController -> GroupService: createGroup(group)
activate GroupService
GroupService -> GroupRepository: save(group)
activate GroupRepository
GroupRepository --> GroupService: savedGroup
deactivate GroupRepository
GroupService -> GroupService: updateGroupStatus(groupId)
GroupService --> GroupController: createdGroup
deactivate GroupService
GroupController --> InstitutionalAdmin: groupCreated
deactivate GroupController

== Member Invitation ==
InstitutionalAdmin -> GroupController: inviteMembers(groupId, emails)
activate GroupController
GroupController -> GroupService: processMemberInvitations(groupId, emails)
activate GroupService
GroupService -> UserRepository: getUsersByEmails(emails)
activate UserRepository
UserRepository --> GroupService: users
deactivate UserRepository
GroupService -> EmailService: sendGroupInvitation(email, groupName, inviterName)
activate EmailService
EmailService --> GroupService: invitationSent
deactivate EmailService
GroupService --> GroupController: invitationsSent
deactivate GroupService
GroupController --> InstitutionalAdmin: membersInvited
deactivate GroupController

== Member Joining ==
User -> GroupController: joinGroup(groupId, inviteToken)
activate GroupController
GroupController -> GroupService: processJoinRequest(groupId, userId)
activate GroupService
GroupService -> GroupMembershipRepository: save(membership)
activate GroupMembershipRepository
GroupMembershipRepository --> GroupService: savedMembership
deactivate GroupMembershipRepository
GroupService -> GroupService: updateMemberCount(groupId)
GroupService -> GroupService: updateGroupStats(groupId)
GroupService -> EmailService: sendWelcomeToGroup(email, groupName)
activate EmailService
EmailService --> GroupService: welcomeSent
deactivate EmailService
GroupService --> GroupController: memberJoined
deactivate GroupService
GroupController --> User: joinedGroup
deactivate GroupController

== Group Status Update ==
InstitutionalAdmin -> GroupController: updateGroupStatus(groupId, status)
activate GroupController
GroupController -> GroupService: updateGroupStatus(groupId)
activate GroupService
GroupService -> GroupRepository: update(groupId, status)
activate GroupRepository
GroupRepository --> GroupService: updatedGroup
deactivate GroupRepository
GroupService -> EmailService: notifyGroupMembers(groupId, status)
activate EmailService
EmailService --> GroupService: notificationSent
deactivate EmailService
GroupService --> GroupController: statusUpdated
deactivate GroupService
GroupController --> InstitutionalAdmin: groupStatusUpdated
deactivate GroupController

@enduml 